#!/usr/bin/env python3
"""
Playground script to run the Friendship Manager GUI interface with real backend integration.
"""

import os
import sys

# Add the src directory to the Python path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", ".."))

from friendship.application.accept_friendship_invite_use_case import (
    AcceptFriendshipInviteInputDto,
)
from friendship.application.send_friendship_invite_use_case import (
    SendFriendshipInviteInputDto,
)
from friendship.ui.friendship_manager_gui import FriendshipManagerGUI
from shared.composition_root import build_application
from user.application.create_user_use_case import CreateUserInputDto
from user.domain.user_role import UserRole


def setup_mock_data(app):
    """Cria dados mock usando os casos de uso para testar a interface"""
    print("üìä Criando dados mock...")

    try:
        # Criar usu√°rios mock - quantidade suficiente para testar pagina√ß√£o (dobrado)
        users_data = [
            {
                "name": "Jo√£o Silva",
                "email": "joao@email.com",
                "password": "123456",
            },  # ID ser√° 1 (usu√°rio atual)
            {
                "name": "Maria Santos",
                "email": "maria@email.com",
                "password": "123456",
            },  # ID ser√° 2
            {
                "name": "Pedro Oliveira",
                "email": "pedro@email.com",
                "password": "123456",
            },  # ID ser√° 3
            {
                "name": "Ana Costa",
                "email": "ana@email.com",
                "password": "123456",
            },  # ID ser√° 4
            {
                "name": "Carlos Lima",
                "email": "carlos@email.com",
                "password": "123456",
            },  # ID ser√° 5
            {
                "name": "Julia Pereira",
                "email": "julia@email.com",
                "password": "123456",
            },  # ID ser√° 6
            {
                "name": "Roberto Souza",
                "email": "roberto@email.com",
                "password": "123456",
            },  # ID ser√° 7
            {
                "name": "Fernanda Alves",
                "email": "fernanda@email.com",
                "password": "123456",
            },  # ID ser√° 8
            {
                "name": "Lucas Mendes",
                "email": "lucas@email.com",
                "password": "123456",
            },  # ID ser√° 9
            {
                "name": "Camila Rocha",
                "email": "camila@email.com",
                "password": "123456",
            },  # ID ser√° 10
            {
                "name": "Bruno Ferreira",
                "email": "bruno@email.com",
                "password": "123456",
            },  # ID ser√° 11
            {
                "name": "Larissa Martins",
                "email": "larissa@email.com",
                "password": "123456",
            },  # ID ser√° 12
            {
                "name": "Rafael Cardoso",
                "email": "rafael@email.com",
                "password": "123456",
            },  # ID ser√° 13
            {
                "name": "Mariana Silva",
                "email": "mariana@email.com",
                "password": "123456",
            },  # ID ser√° 14
            {
                "name": "Diego Santos",
                "email": "diego@email.com",
                "password": "123456",
            },  # ID ser√° 15
            {
                "name": "Isabela Lima",
                "email": "isabela@email.com",
                "password": "123456",
            },  # ID ser√° 16
            {
                "name": "Thiago Costa",
                "email": "thiago@email.com",
                "password": "123456",
            },  # ID ser√° 17
            {
                "name": "Nat√°lia Pereira",
                "email": "natalia@email.com",
                "password": "123456",
            },  # ID ser√° 18
            {
                "name": "Guilherme Alves",
                "email": "guilherme@email.com",
                "password": "123456",
            },  # ID ser√° 19
            {
                "name": "Bianca Souza",
                "email": "bianca@email.com",
                "password": "123456",
            },  # ID ser√° 20
            {
                "name": "Mateus Oliveira",
                "email": "mateus@email.com",
                "password": "123456",
            },  # ID ser√° 21
            {
                "name": "Vanessa Mendes",
                "email": "vanessa@email.com",
                "password": "123456",
            },  # ID ser√° 22
            {
                "name": "Andr√© Rocha",
                "email": "andre@email.com",
                "password": "123456",
            },  # ID ser√° 23
            {
                "name": "Carolina Ferreira",
                "email": "carolina@email.com",
                "password": "123456",
            },  # ID ser√° 24
            {
                "name": "Felipe Martins",
                "email": "felipe@email.com",
                "password": "123456",
            },  # ID ser√° 25
            # Novos usu√°rios adicionados (dobrado)
            {
                "name": "Rodrigo Silva",
                "email": "rodrigo@email.com",
                "password": "123456",
            },  # ID ser√° 26
            {
                "name": "Amanda Santos",
                "email": "amanda@email.com",
                "password": "123456",
            },  # ID ser√° 27
            {
                "name": "Gabriel Oliveira",
                "email": "gabriel@email.com",
                "password": "123456",
            },  # ID ser√° 28
            {
                "name": "Let√≠cia Costa",
                "email": "leticia@email.com",
                "password": "123456",
            },  # ID ser√° 29
            {
                "name": "Vin√≠cius Lima",
                "email": "vinicius@email.com",
                "password": "123456",
            },  # ID ser√° 30
            {
                "name": "Patr√≠cia Pereira",
                "email": "patricia@email.com",
                "password": "123456",
            },  # ID ser√° 31
            {
                "name": "Eduardo Souza",
                "email": "eduardo@email.com",
                "password": "123456",
            },  # ID ser√° 32
            {
                "name": "Juliana Alves",
                "email": "juliana@email.com",
                "password": "123456",
            },  # ID ser√° 33
            {
                "name": "M√°rcio Mendes",
                "email": "marcio@email.com",
                "password": "123456",
            },  # ID ser√° 34
            {
                "name": "Priscila Rocha",
                "email": "priscila@email.com",
                "password": "123456",
            },  # ID ser√° 35
            {
                "name": "Fabiano Ferreira",
                "email": "fabiano@email.com",
                "password": "123456",
            },  # ID ser√° 36
            {
                "name": "Adriana Martins",
                "email": "adriana@email.com",
                "password": "123456",
            },  # ID ser√° 37
            {
                "name": "Leandro Cardoso",
                "email": "leandro@email.com",
                "password": "123456",
            },  # ID ser√° 38
            {
                "name": "Cristiane Silva",
                "email": "cristiane@email.com",
                "password": "123456",
            },  # ID ser√° 39
            {
                "name": "Renato Santos",
                "email": "renato@email.com",
                "password": "123456",
            },  # ID ser√° 40
            {
                "name": "Simone Lima",
                "email": "simone@email.com",
                "password": "123456",
            },  # ID ser√° 41
            {
                "name": "Marcelo Costa",
                "email": "marcelo@email.com",
                "password": "123456",
            },  # ID ser√° 42
            {
                "name": "Elaine Pereira",
                "email": "elaine@email.com",
                "password": "123456",
            },  # ID ser√° 43
            {
                "name": "Alexandre Alves",
                "email": "alexandre@email.com",
                "password": "123456",
            },  # ID ser√° 44
            {
                "name": "Daniela Souza",
                "email": "daniela@email.com",
                "password": "123456",
            },  # ID ser√° 45
            {
                "name": "Leonardo Oliveira",
                "email": "leonardo@email.com",
                "password": "123456",
            },  # ID ser√° 46
            {
                "name": "Karina Mendes",
                "email": "karina@email.com",
                "password": "123456",
            },  # ID ser√° 47
            {
                "name": "F√°bio Rocha",
                "email": "fabio@email.com",
                "password": "123456",
            },  # ID ser√° 48
            {
                "name": "Tatiana Ferreira",
                "email": "tatiana@email.com",
                "password": "123456",
            },  # ID ser√° 49
            {
                "name": "Gustavo Martins",
                "email": "gustavo@email.com",
                "password": "123456",
            },  # ID ser√° 50
        ]

        created_users = []
        for user_data in users_data:
            try:
                user_dto = CreateUserInputDto(
                    name=user_data["name"],
                    email=user_data["email"],
                    password=user_data["password"],
                    role=UserRole.CLIENT,
                )
                user = app.create_user_use_case.execute(user_dto)
                created_users.append(user)
                print(f"  ‚úÖ Usu√°rio criado: {user.name} (ID: {user.id})")
            except Exception as e:
                print(f"  ‚ö†Ô∏è  Usu√°rio {user_data['name']} j√° existe ou erro: {e}")

        # Criar amizades COM o usu√°rio atual (Jo√£o - ID=1) - dobrado para testar pagina√ß√£o
        friendships_with_current_user = [
            {
                "requester": "joao@email.com",
                "requested": "maria@email.com",
            },  # Jo√£o ‚Üí Maria
            {
                "requester": "pedro@email.com",
                "requested": "joao@email.com",
            },  # Pedro ‚Üí Jo√£o
            {"requester": "ana@email.com", "requested": "joao@email.com"},  # Ana ‚Üí Jo√£o
            {
                "requester": "joao@email.com",
                "requested": "carlos@email.com",
            },  # Jo√£o ‚Üí Carlos
            {
                "requester": "julia@email.com",
                "requested": "joao@email.com",
            },  # Julia ‚Üí Jo√£o
            {
                "requester": "joao@email.com",
                "requested": "roberto@email.com",
            },  # Jo√£o ‚Üí Roberto
            {
                "requester": "fernanda@email.com",
                "requested": "joao@email.com",
            },  # Fernanda ‚Üí Jo√£o
            {
                "requester": "joao@email.com",
                "requested": "lucas@email.com",
            },  # Jo√£o ‚Üí Lucas
            {
                "requester": "camila@email.com",
                "requested": "joao@email.com",
            },  # Camila ‚Üí Jo√£o
            {
                "requester": "joao@email.com",
                "requested": "bruno@email.com",
            },  # Jo√£o ‚Üí Bruno
            {
                "requester": "larissa@email.com",
                "requested": "joao@email.com",
            },  # Larissa ‚Üí Jo√£o
            {
                "requester": "joao@email.com",
                "requested": "rafael@email.com",
            },  # Jo√£o ‚Üí Rafael
            {
                "requester": "mariana@email.com",
                "requested": "joao@email.com",
            },  # Mariana ‚Üí Jo√£o
            {
                "requester": "joao@email.com",
                "requested": "diego@email.com",
            },  # Jo√£o ‚Üí Diego
            {
                "requester": "isabela@email.com",
                "requested": "joao@email.com",
            },  # Isabela ‚Üí Jo√£o
            {
                "requester": "joao@email.com",
                "requested": "thiago@email.com",
            },  # Jo√£o ‚Üí Thiago
            {
                "requester": "natalia@email.com",
                "requested": "joao@email.com",
            },  # Nat√°lia ‚Üí Jo√£o
            {
                "requester": "joao@email.com",
                "requested": "guilherme@email.com",
            },  # Jo√£o ‚Üí Guilherme
            # Novos amigos adicionados (dobrado)
            {
                "requester": "bianca@email.com",
                "requested": "joao@email.com",
            },  # Bianca ‚Üí Jo√£o
            {
                "requester": "joao@email.com",
                "requested": "mateus@email.com",
            },  # Jo√£o ‚Üí Mateus
            {
                "requester": "vanessa@email.com",
                "requested": "joao@email.com",
            },  # Vanessa ‚Üí Jo√£o
            {
                "requester": "joao@email.com",
                "requested": "andre@email.com",
            },  # Jo√£o ‚Üí Andr√©
            {
                "requester": "carolina@email.com",
                "requested": "joao@email.com",
            },  # Carolina ‚Üí Jo√£o
            {
                "requester": "joao@email.com",
                "requested": "felipe@email.com",
            },  # Jo√£o ‚Üí Felipe
            {
                "requester": "rodrigo@email.com",
                "requested": "joao@email.com",
            },  # Rodrigo ‚Üí Jo√£o
            {
                "requester": "joao@email.com",
                "requested": "amanda@email.com",
            },  # Jo√£o ‚Üí Amanda
            {
                "requester": "gabriel@email.com",
                "requested": "joao@email.com",
            },  # Gabriel ‚Üí Jo√£o
            {
                "requester": "joao@email.com",
                "requested": "leticia@email.com",
            },  # Jo√£o ‚Üí Let√≠cia
            {
                "requester": "vinicius@email.com",
                "requested": "joao@email.com",
            },  # Vin√≠cius ‚Üí Jo√£o
            {
                "requester": "joao@email.com",
                "requested": "patricia@email.com",
            },  # Jo√£o ‚Üí Patr√≠cia
            {
                "requester": "eduardo@email.com",
                "requested": "joao@email.com",
            },  # Eduardo ‚Üí Jo√£o
            {
                "requester": "joao@email.com",
                "requested": "juliana@email.com",
            },  # Jo√£o ‚Üí Juliana
            {
                "requester": "marcio@email.com",
                "requested": "joao@email.com",
            },  # M√°rcio ‚Üí Jo√£o
            {
                "requester": "joao@email.com",
                "requested": "priscila@email.com",
            },  # Jo√£o ‚Üí Priscila
            {
                "requester": "fabiano@email.com",
                "requested": "joao@email.com",
            },  # Fabiano ‚Üí Jo√£o
            {
                "requester": "joao@email.com",
                "requested": "adriana@email.com",
            },  # Jo√£o ‚Üí Adriana
        ]

        # Criar amizades SEM rela√ß√£o com o usu√°rio atual (para garantir que n√£o aparecem na lista) - dobrado
        friendships_without_current_user = [
            {
                "requester": "leandro@email.com",
                "requested": "cristiane@email.com",
            },  # Leandro ‚Üí Cristiane
            {
                "requester": "renato@email.com",
                "requested": "simone@email.com",
            },  # Renato ‚Üí Simone
            {
                "requester": "marcelo@email.com",
                "requested": "elaine@email.com",
            },  # Marcelo ‚Üí Elaine
            {
                "requester": "alexandre@email.com",
                "requested": "daniela@email.com",
            },  # Alexandre ‚Üí Daniela
            {
                "requester": "leonardo@email.com",
                "requested": "karina@email.com",
            },  # Leonardo ‚Üí Karina
            {
                "requester": "fabio@email.com",
                "requested": "tatiana@email.com",
            },  # F√°bio ‚Üí Tatiana
            {
                "requester": "gustavo@email.com",
                "requested": "rodrigo@email.com",
            },  # Gustavo ‚Üí Rodrigo
            {
                "requester": "maria@email.com",
                "requested": "pedro@email.com",
            },  # Maria ‚Üí Pedro (sem Jo√£o)
            {
                "requester": "ana@email.com",
                "requested": "carlos@email.com",
            },  # Ana ‚Üí Carlos (sem Jo√£o)
            {
                "requester": "amanda@email.com",
                "requested": "gabriel@email.com",
            },  # Amanda ‚Üí Gabriel
        ]

        print("\nüîó Criando amizades COM o usu√°rio atual (devem aparecer na lista):")
        for friendship_data in friendships_with_current_user:
            try:
                # Enviar convite
                invite_dto = SendFriendshipInviteInputDto(
                    requester_client_email=friendship_data["requester"],
                    requested_client_email=friendship_data["requested"],
                )
                friendship = app.send_friendship_invite_use_case.execute(invite_dto)
                print(
                    f"  üì§ Convite enviado: {friendship_data['requester']} ‚Üí {friendship_data['requested']}"
                )

                # Aceitar o convite
                accept_dto = AcceptFriendshipInviteInputDto(friendship_id=friendship.id)
                app.accept_friendship_invite_use_case.execute(accept_dto)
                print(f"  ‚úÖ Convite aceito: ID {friendship.id}")

            except Exception as e:
                print(f"  ‚ö†Ô∏è  Erro ao criar/aceitar amizade: {e}")

        print(
            "\nüö´ Criando amizades SEM o usu√°rio atual (N√ÉO devem aparecer na lista):"
        )
        for friendship_data in friendships_without_current_user:
            try:
                # Enviar convite
                invite_dto = SendFriendshipInviteInputDto(
                    requester_client_email=friendship_data["requester"],
                    requested_client_email=friendship_data["requested"],
                )
                friendship = app.send_friendship_invite_use_case.execute(invite_dto)
                print(
                    f"  üì§ Convite enviado: {friendship_data['requester']} ‚Üí {friendship_data['requested']}"
                )

                # Aceitar o convite
                accept_dto = AcceptFriendshipInviteInputDto(friendship_id=friendship.id)
                app.accept_friendship_invite_use_case.execute(accept_dto)
                print(f"  ‚úÖ Convite aceito: ID {friendship.id}")

            except Exception as e:
                print(f"  ‚ö†Ô∏è  Erro ao criar/aceitar amizade: {e}")

        print("\nüìä Dados mock criados com sucesso!")

    except Exception as e:
        print(f"‚ùå Erro ao criar dados mock: {e}")


def main():
    print("üöÄ Starting Friendship Manager GUI with Backend Integration...")
    print("üìã This version uses real backend functionality!")
    print("üéØ Testing friendship listing with mock data")
    print("-" * 70)

    try:
        # Build application with all dependencies
        app = build_application()

        # Setup mock data for testing
        setup_mock_data(app)

        print("-" * 70)
        print("üñ•Ô∏è  Opening Friendship Manager GUI...")

        # Create and show the GUI with use cases injected
        gui = FriendshipManagerGUI(use_cases=app)
        gui.show()

        print("‚úÖ GUI closed successfully!")

    except Exception as e:
        print(f"‚ùå Error running the application: {e}")
        import traceback

        traceback.print_exc()
        return 1

    return 0


if __name__ == "__main__":
    exit(main())
